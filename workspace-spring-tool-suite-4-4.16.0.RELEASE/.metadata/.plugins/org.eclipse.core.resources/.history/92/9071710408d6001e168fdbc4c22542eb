package com.cg.springRestPrblms.springRestPrblms.Surveyquestions;

 
import java.util.List;
 
import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.ExceptionHandler;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestBody;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.RestController;
 
@RestController

public class SurveyResource {

	private SurveyService service =new SurveyService();

	@RequestMapping("/surveys")

	public  List<Survey>   retrieveAllSurveys()

	{

	return service.retrieveAll();

	}

	@RequestMapping("/surveys/{surveyId}")

	public  Survey   retrievebySurveyId( @PathVariable int surveyId)

	{

	if(service.retrievebySurveyID(surveyId)==null) {

			throw new SurveyNotFoundException("Invalid Survey Id "+surveyId);

	}

			return service.retrievebySurveyID(surveyId);

	}

	@RequestMapping("/surveys/{surveyId}/questions")

	 public List<Question> retrieveQuestion(@PathVariable int surveyId)

		{

			return service.retreiveQuestion(surveyId);

		}

		//retrieve specific question-GET

		@RequestMapping("/surveys/{surveyId}/questions/{questionId}")

		public Question retreiveQuestionById(@PathVariable int surveyId, @PathVariable int questionId)

		{

			if(service.retrievebyQuestionId(surveyId,questionId)==null) {

				throw new QuestionNotFoundException("Question Id Not available "+questionId);}

			return service.retrievebyQuestionId(surveyId,questionId);

		}

		//add a question-POST

		@RequestMapping(value="/surveys/{surveyId}/questions", method=RequestMethod.POST)

		public void addSurveyQuestion(@PathVariable int surveyId,@RequestBody Question question)

		{

			service.addSurveyQuestion(surveyId, question);

		}


		//delete a question

		@RequestMapping(value="/surveys/{surveyId}/questions/{questionId}", method=RequestMethod.DELETE)

		public ResponseEntity<Object> deleteSpecficQuestion(@PathVariable int surveyId, @PathVariable int questionId)

		{

			service.deleteSurveyQuestion(surveyId, questionId);

			return ResponseEntity.noContent().build();

		}

		@RequestMapping(value="/surveys/{surveyId}/questions/{questionId}",method=RequestMethod.PUT)

		public void updateSurveyQuestion(@PathVariable int surveyId,@PathVariable int questionId,@RequestBody Question question)

		{

			service.updateSurveyQuestion(surveyId, questionId,question);

		}

		@ExceptionHandler

		public ResponseEntity<ErrorResponse> handlerexception(QuestionNotFoundException ex)

		{

			ErrorResponse err=new ErrorResponse();

			err.setMessage(ex.getMessage());

			err.setStatus(HttpStatus.NOT_FOUND.toString());

			err.setTimestamp(System.currentTimeMillis());

			return new ResponseEntity<>(err,HttpStatus.NOT_FOUND);

		}

		@ExceptionHandler

		public ResponseEntity<ErrorResponse> handlerexception(Exception ex)

		{

			ErrorResponse err=new ErrorResponse();

			err.setMessage(ex.getMessage());

			err.setStatus(HttpStatus.BAD_REQUEST.toString());

			err.setTimestamp(System.currentTimeMillis());

			return new ResponseEntity<>(err,HttpStatus.BAD_REQUEST);

		}

}
